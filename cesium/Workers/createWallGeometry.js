/**
 * @license
 * Cesium - https://github.com/CesiumGS/cesium
 * Version 1.132
 *
 * Copyright 2011-2022 Cesium Contributors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Columbus View (Pat. Pend.)
 *
 * Portions licensed separately.
 * See https://github.com/CesiumGS/cesium/blob/main/LICENSE.md for full licensing details.
 */
import{a as nt}from"./chunk-NB3ML6JO.js";import"./chunk-XRL4AVS5.js";import"./chunk-U4IEOH5K.js";import{a as w}from"./chunk-CYCB63OH.js";import"./chunk-3W4GT7KQ.js";import"./chunk-G5AGHVVC.js";import"./chunk-DMEY62ID.js";import"./chunk-HTFSEEMT.js";import{a as ot}from"./chunk-OFUUQVMR.js";import{a as it}from"./chunk-A56XVLQR.js";import{b as tt,c as et,d as R}from"./chunk-RCV6KWXS.js";import{d as I}from"./chunk-4IW2T6GF.js";import"./chunk-PSPPBZWI.js";import{a as N}from"./chunk-AU7IKHOH.js";import{a as s,d as l,f as K}from"./chunk-64RSHJUE.js";import{a as V}from"./chunk-3SSKC3VN.js";import"./chunk-OSW76XDF.js";import"./chunk-ED5JPB3S.js";import{a as y}from"./chunk-LEYMRMBK.js";import{e as r}from"./chunk-VTAIKJXX.js";var Q=new s,J=new s,lt=new s,st=new s,pt=new s,ut=new s,ft=new s;function E(t){t=t??K.EMPTY_OBJECT;let e=t.positions,i=t.maximumHeights,n=t.minimumHeights;if(!r(e))throw new y("options.positions is required.");if(r(i)&&i.length!==e.length)throw new y("options.positions and options.maximumHeights must have the same length.");if(r(n)&&n.length!==e.length)throw new y("options.positions and options.minimumHeights must have the same length.");let o=t.vertexFormat??w.DEFAULT,a=t.granularity??V.RADIANS_PER_DEGREE,m=t.ellipsoid??l.default;this._positions=e,this._minimumHeights=n,this._maximumHeights=i,this._vertexFormat=w.clone(o),this._granularity=a,this._ellipsoid=l.clone(m),this._workerName="createWallGeometry";let p=1+e.length*s.packedLength+2;r(n)&&(p+=n.length),r(i)&&(p+=i.length),this.packedLength=p+l.packedLength+w.packedLength+1}E.pack=function(t,e,i){if(!r(t))throw new y("value is required");if(!r(e))throw new y("array is required");i=i??0;let n,o=t._positions,a=o.length;for(e[i++]=a,n=0;n<a;++n,i+=s.packedLength)s.pack(o[n],e,i);let m=t._minimumHeights;if(a=r(m)?m.length:0,e[i++]=a,r(m))for(n=0;n<a;++n)e[i++]=m[n];let p=t._maximumHeights;if(a=r(p)?p.length:0,e[i++]=a,r(p))for(n=0;n<a;++n)e[i++]=p[n];return l.pack(t._ellipsoid,e,i),i+=l.packedLength,w.pack(t._vertexFormat,e,i),i+=w.packedLength,e[i]=t._granularity,e};var mt=l.clone(l.UNIT_SPHERE),rt=new w,U={positions:void 0,minimumHeights:void 0,maximumHeights:void 0,ellipsoid:mt,vertexFormat:rt,granularity:void 0};E.unpack=function(t,e,i){if(!r(t))throw new y("array is required");e=e??0;let n,o,a,m=t[e++],p=new Array(m);for(n=0;n<m;++n,e+=s.packedLength)p[n]=s.unpack(t,e);if(m=t[e++],m>0)for(o=new Array(m),n=0;n<m;++n)o[n]=t[e++];if(m=t[e++],m>0)for(a=new Array(m),n=0;n<m;++n)a[n]=t[e++];let u=l.unpack(t,e,mt);e+=l.packedLength;let h=w.unpack(t,e,rt);e+=w.packedLength;let c=t[e];return r(i)?(i._positions=p,i._minimumHeights=o,i._maximumHeights=a,i._ellipsoid=l.clone(u,i._ellipsoid),i._vertexFormat=w.clone(h,i._vertexFormat),i._granularity=c,i):(U.positions=p,U.minimumHeights=o,U.maximumHeights=a,U.granularity=c,new E(U))},E.fromConstantHeights=function(t){t=t??K.EMPTY_OBJECT;let e=t.positions;if(!r(e))throw new y("options.positions is required.");let i,n,o=t.minimumHeight,s=t.maximumHeight,a=r(o),m=r(s);if(a||m){let t=e.length;i=a?new Array(t):void 0,n=m?new Array(t):void 0;for(let e=0;e<t;++e)a&&(i[e]=o),m&&(n[e]=s)}let l={positions:e,maximumHeights:n,minimumHeights:i,ellipsoid:t.ellipsoid,vertexFormat:t.vertexFormat};return new E(l)},E.createGeometry=function(t){let e=t._positions,i=t._minimumHeights,n=t._maximumHeights,o=t._vertexFormat,a=t._granularity,m=t._ellipsoid,l=nt.computePositions(m,e,n,i,a,!0);if(!r(l))return;let p=l.bottomPositions,u=l.topPositions,h=l.numCorners,c=u.length,g=2*c,f=o.position?new Float64Array(g):void 0,w=o.normal?new Float32Array(g):void 0,y=o.tangent?new Float32Array(g):void 0,d=o.bitangent?new Float32Array(g):void 0,k=o.st?new Float32Array(g/3*2):void 0,A=0,_=0,v=0,E=0,H=0,x=ft,F=ut,L=pt,j=!0;c/=3;let b,O=0,P=1/(c-h-1);for(b=0;b<c;++b){let t=3*b,e=s.fromArray(u,t,Q),i=s.fromArray(p,t,J);if(o.position&&(f[A++]=i.x,f[A++]=i.y,f[A++]=i.z,f[A++]=e.x,f[A++]=e.y,f[A++]=e.z),o.st&&(k[H++]=O,k[H++]=0,k[H++]=O,k[H++]=1),o.normal||o.tangent||o.bitangent){let i=s.clone(s.ZERO,st),n=s.subtract(e,m.geodeticSurfaceNormal(e,J),J);if(b+1<c&&(i=s.fromArray(u,t+3,st)),j){let t=s.subtract(i,e,lt),r=s.subtract(n,e,Q);x=s.normalize(s.cross(r,t,x),x),j=!1}s.equalsEpsilon(e,i,V.EPSILON10)?j=!0:(O+=P,o.tangent&&(F=s.normalize(s.subtract(i,e,F),F)),o.bitangent&&(L=s.normalize(s.cross(x,F,L),L))),o.normal&&(w[_++]=x.x,w[_++]=x.y,w[_++]=x.z,w[_++]=x.x,w[_++]=x.y,w[_++]=x.z),o.tangent&&(y[E++]=F.x,y[E++]=F.y,y[E++]=F.z,y[E++]=F.x,y[E++]=F.y,y[E++]=F.z),o.bitangent&&(d[v++]=L.x,d[v++]=L.y,d[v++]=L.z,d[v++]=L.x,d[v++]=L.y,d[v++]=L.z)}}let T=new it;o.position&&(T.position=new R({componentDatatype:N.DOUBLE,componentsPerAttribute:3,values:f})),o.normal&&(T.normal=new R({componentDatatype:N.FLOAT,componentsPerAttribute:3,values:w})),o.tangent&&(T.tangent=new R({componentDatatype:N.FLOAT,componentsPerAttribute:3,values:y})),o.bitangent&&(T.bitangent=new R({componentDatatype:N.FLOAT,componentsPerAttribute:3,values:d})),o.st&&(T.st=new R({componentDatatype:N.FLOAT,componentsPerAttribute:2,values:k}));let S=g/3;g-=6*(h+1);let U=ot.createTypedArray(S,g),D=0;for(b=0;b<S-2;b+=2){let t=b,e=b+2,i=s.fromArray(f,3*t,Q),n=s.fromArray(f,3*e,J);if(s.equalsEpsilon(i,n,V.EPSILON10))continue;let r=b+1,o=b+3;U[D++]=r,U[D++]=t,U[D++]=o,U[D++]=o,U[D++]=t,U[D++]=e}return new et({attributes:T,indices:U,primitiveType:tt.TRIANGLES,boundingSphere:new I.fromVertices(f)})};var X=E;function ht(t,e){return r(e)&&(t=X.unpack(t,e)),t._ellipsoid=l.clone(t._ellipsoid),X.createGeometry(t)}var Ot=ht;export{Ot as default};